# -*- coding: utf-8 -*-
"""
PYTEMPLATE

A python code generation function for any language. 

Created on Tue Feb 10 13:17:29 2015

@author: Dave
"""
version = '0.01'

import sys
import csv
import re
from datetime import datetime
import os

os.chdir("E:\Dropbox\Documents\Code\GitHub\AndroTag\Common\pyTemplate\example")

header = """/*
--------------------------------------------------------------------
XXXX           PYTEMPLATE AUTOMATICALLY GENERATED FILE          XXXX

        version %04s                                                
        Generated %s
        
XXXX    DO NOT EDIT THIS FILE                                   XXXX
--------------------------------------------------------------------
*/"""%(version,str(datetime.now()))
        



# Simple object for each entry
class Entry(object):
    def __init__(self, **kwargs):
        self.__dict__.update(kwargs)

# Reads a csv file to entries
def getEntries(filename):
    # Get as tuple
    with open(filename) as f:
        data=[tuple(line) for line in csv.reader(f)]
        
    # Convert tuples to entries
    fields = [name.lower().strip() for name in data[0]]
    
    # Convert to entry
    entries = [];
    for i in range(1,len(data)):
        entry = Entry()
        
        for f in range(len(fields)):
            setattr(entry,fields[f],data[i][f].strip())
            
        entries.append(entry)
    
    return entries

# UTILITY FUNCTIONS
def tolowersplit(name):
    s1 = re.sub('(.)([A-Z][a-z]+)', r'\1_\2', name)
    return re.sub('([a-z0-9])([A-Z])', r'\1_\2', s1).lower()

def touppersplit(name):
    s1 = re.sub('(.)([A-Z][a-z]+)', r'\1_\2', name)
    return re.sub('([a-z0-9])([A-Z])', r'\1_\2', s1).upper()

def tolowercamel(name):
    name = tolowersplit(name);
    def camelcase(): 
        yield str.lower
        while True:
            yield str.capitalize

    c = camelcase()
    return "".join(c.next()(x) if x else '_' for x in name.split("_"))

def touppercamel(name):
    name = tolowersplit(name)
    return "".join(term.capitalize() for term in name.split("_"))
    
# WRITING FUNCTIONS
def write(s):
    write.output += s
def writeln(s):
    write(s + '\n')

def execBlock(block, entries):
    
    write.output = "";
    
    # Extract text
    regex = re.compile("/\*PYTEMPLATE:(\S+)(.*?)\*/",re.DOTALL)
    m1 =  regex.match(block)
    mode = m1.group(1)
    code = m1.group(2)
    
    #Fix indent level
    regex = re.compile("(\n\t*)",re.DOTALL)
    indentlevel = regex.search(code).groups()[0]
    code = re.sub(indentlevel,'\n',code)
    
    
    if mode.upper() != "FOREACH":
        print "Only supported mode is FOREACH"
        exit(1)
    
    # Exec the code
    for entry in entries:
        exec(code)
    
    # Fix indent level
    output = indentlevel + re.sub('\n',indentlevel,write.output);    
    
    return output
    

def runFile(template, protocol):
    
    entries = getEntries(protocol)
    
    # Get all PYTEMPLATE segments
    with open (template,"r") as fid:
        text=fid.read()
        
    regex = re.compile("/\*PYTEMPLATE.*?\*/",re.DOTALL)
    m = regex.findall(text);
    
    # Replace all blocks
    for block in m:
        generated = "\n/* AUTO CODE BEGIN */\n"+ \
                    execBlock(block,entries) + \
                    "\n/* AUTO CODE END */\n"
        text = text.replace(block,generated)
    
    
    return header+text
    
    
    
""" FINALLY, here is the argument handling"""
if len(sys.argv) is 4:
    with open(sys.argv[3],'w') as fid:
        fid.write(runFile(sys.argv[1],sys.argv[2]))

elif len(sys.argv) is 3:
    if not sys.argv[1].endswith('.pytemplate'):
        print '2 argument invocation requires a .pytemplate file'
        exit(1)
        
    filename = sys.argv[1][:-11:]
    with open(filename,'w') as fid:
        fid.write(runFile(sys.argv[1],sys.argv[2]))
    
else:
    print "PyTemplate code filler, invoke with python pytemplate.py <template>.pytemplate <data>.csv"
    exit(1)            
    

    