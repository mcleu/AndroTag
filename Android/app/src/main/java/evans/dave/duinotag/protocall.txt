
SERIAL PROTOCALL
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

All messages are sent in the form (byte packet_id, byte key_value, byte arg0,byte arg1,...)
After a message is recieved on either end that is not packet_recv, the receiver sends packet_recv (packet_id)
to confirm that the message was received. 

This may not be necessary, but we likely need some way to determine whether the serial connection has been dropped 
and messages are just hanging.

Note, each key value needs a byte value associated with it. What the value is doesn't matter, as long as there is a text document 
(tab separated) that specifies the mapping so we can use the code in both the python, android, and arduino code (3 different languages :/)

ARDUINO PROPERTIES:
gun properties (i.e. ammo, reload, etc)
available guns (max 4, min 1, just a list of evans.dave.duinotag.Gun class-type variables)
lives
shields
respawn
game end time (this is shared)
*IMPORTANT* Active teams in the game

evans.dave.duinotag.Game id (byte)
team id (byte)
player/gun id (byte)

an disabled flag (I have no plans to use this yet, it just basically disables the gun/player)

ANDROID PROPERTIES:
A mirror of everything the gun has access to, in addition to...
Score
Kills
Deaths
Assists
evans.dave.duinotag.Game status (i.e. ended due to reaching score, kills, etc)
Username conversion table


XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

KEY VALUE			ARGUMENTS
-----------------------------------------------------------------------------

	ANDROID <-> ARDUINO
packet_recv			packet_id
set_lives			value

// These ones are more for debugging. Ideally they will be exclusively ARDUINO --> ANDROID
set_respawn			time_ms (long)
set_shield			value
set_active			gun_index
try_reload			
try_fire				


	ANDROID --> ARDUINO
set_num_guns		number_available
set_team			team_id
set_color			red		green	blue	
set_player			player_id
set_game			game_id
set_starttime		start_3	start_2	start_1	start_0 // Displacement as a long in ms from the current time
set_endtime			end_3	end_2	end_1	end_0 // Displacement as a long in ms from the current time
set_disabled		value
end_game

gun_properties		gun_index	gun_id	damage	max_ammo	fireTime	reloadTime
		

	ARDUINO --> ANDROID
fire_success		is_success //1 if the gun can fire right now
reload_success		is_success //1 if the gun doesn't have max ammo and begins reloading
no_lives			// under some circumstances, android may add some more lives
hitby				team_id	player_id // immediately followed by a set_shield, or killed packet
killedby			team_id player_id





